FuzzCoin Project.
- PoFW: set of execution hash (set size is configurable)
- How to check PoFW: randompick samples and compare with others
  (what if there is only one slave?)
- Stashing issue: coverage sharing + policy can solve it.
- Rewards: find execution hash (very small), find new coverage, find new crash.
- Differentiate credits for each slaves (make policy based on this)
- First do everything on Linux. Afterward, target Windows slaves.
- Get rid of GUI-auth step for slaves. Deploy via command line. use git, pubkey scheme.
- Web service is for promotion, ranking, account setup, reward management, etc.
- First consider `deterministic` programs (binutils). Afterward, extend to larger program.



TODO Lists.

[Fuzzer Development]
1. LLVM pass for `execution hash` (mostly done)
 - update edge coverage map
 - make the program to spit out execution hash at the end
 - execution hash: SHA1(input || coverage bitmap)

2. Coverage, crash report generation module (prototype done)
 - dependent to Master implementation
 - exit handler spit out coverage map as file (require policy).
 - modify ASAN to make a report suited for our protocol.

3. Test case generator (need design decision)
 - takes `number` and spits out unique test case input for that number
 - we need to make baseline code for various common formats (e.g., png, JavaScript, etc)
 - for uncommon input test cases, master needs to make his own generator


[Orchestration Development]
1. Master/Slave Coordination (prototype done, but need to reflect design change)
 - python wrapper script that handles instrumented binary at this point
 - interact with each other via TCP/JSON
 - Use kubernetes? docker swarm? decide base infra for developement

2. Coverage synchronizer (need design decision)
 - it should coordinate with fuzzer with some protocol?
 - should be a central server?
 - maybe implement this as P2P?

3. Version update manager (need design decision)
 - master needs an interface to update the fuzzer

4. Docker porting (prototype done)
 - make skeleton docker image for fast customizing (for masters)
 - dependent to design decision 1/2 (using kubernetes? etc)


[Web Developement]
1. Port server with python
 - for better interaction with other components

2. UI development (prototype done)
 - user interface
 - overall database design
 - ranking system
 - account setup feature
 - master project creation
 - project join menu


